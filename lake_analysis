import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

#Load the dataset
df = pd.read_csv('GLRSED_NA.csv')

#Explore the dataset
print(df.head())
print(df.info())
print(df.describe())

#Check for missing values
print(df.isna().sum())



# Fill missing values or drop them based on the analysis requirement
df = df.dropna()  # Or df.fillna(method='ffill', inplace=True)

#Data Visualization
sns.pairplot(df)
plt.show()

# # Identify non-numeric columns
# non_numeric_cols = df.select_dtypes(exclude=['number']).columns
# print("Non-numeric columns:", non_numeric_cols)

# # Convert non-numeric columns to numeric
# for col in non_numeric_cols:
#     df[col] = pd.to_numeric(df[col], errors='coerce')

# # Drop rows with non-numeric values
# df = df.dropna()

# #Correlation Analysis
# correlation_matrix = df.corr()
# sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
# plt.show()

 #Distribution of Lake Sizes
plt.figure(figsize=(10,6))
sns.histplot(df['Lake_area'], bins=30, kde=True)
plt.title('Distribution of Lake Sizes')
plt.xlabel('Lake Size')
plt.ylabel('Frequency')
plt.show()

#Clustering Analysis
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df[['Lake_area', 'Latitude', 'Longitude']])

kmeans = KMeans(n_clusters=3)
df['cluster'] = kmeans.fit_predict(df_scaled)

plt.figure(figsize=(10,6))
sns.scatterplot(x='Longitude', y='Latitude', hue='cluster', data=df, palette='viridis')
plt.title('Clustering of Lakes')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.show()

#Machine Learning Prediction
features = df[['Latitude', 'Longitude', 'cluster']]
target = df['Lake_area']

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
predictions = model.predict(X_test)

mse = mean_squared_error(y_test, predictions)
r2 = r2_score(y_test, predictions)
print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')





